---
title: "Getting started with reproduce.work"
format: html
includes:
  after_body: sci-env-tabs.html
---






<!-- Invisible Link to Include the File in Build -->
<a href="/files/dist/reproduce-work-linux" style="display:none;">Invisible Link</a>
<a href="/files/dist/reproduce-work-macos" style="display:none;">Invisible Link</a>
<a href="/files/dist/install.sh" style="display:none;">Invisible Link</a>
<a href="/files/media/rw1.mp4" style="display:none;">Invisible Link</a>




<p style="color: #9753b8; font-weight: bold;">reproduce.work is being published as an alpha development release and should be considered experimental.</p>


## Pre-requisites

*Knowledge*: 

- Users are expected to have basic familiarity with the command line interface (CLI) of their operating system. The following instructions are for users of Linux and macOS. Windows users should install [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10) and follow the instructions for Linux users. 

*Software*: 

- The reproduce.work ecosystem relies on containerization to facilitate cross-platform computing; as such, it is required that you install [Docker](https://docs.docker.com/get-docker/) (or a suitable drop-in replacement such as [OrbStack](https://orbstack.dev/); recommended for Apple Silicon machines). You do not need deep familiarity with Docker or containerization to use reproduce.work, but you will need to install Docker and ensure that it is running on your machine (which you can confirm by running `docker` in your preferred terminal).

<!--- While not required, it is also recommended that you install [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) and publish your reproducible projects to GitHub, as this will allow you to easily share your work openly with others and take advantage of the full suite of features offered by reproduce.work.-->

Besides the above, *no other software is required to use reproduce.work*. All other dependencies will be installed **inside a containerized environment** automatically when you run the `rw build` command. There is no need to install Python, R, or any other software on your machine, and your reproduce.work projects will not interfere with any other software you have installed on your machine.

## Installation

The reproduce.work command line interface can be installed with following shell command:

``` {.bash filename="Terminal"}
curl -sSL https://reproduce.work/install | bash
```

You will be prompted with two options:

1. Install to your machine (in `/usr/local/bin`) for use anywhere in your command line
2. Install to your current directory. This creates a folder in your current directory named `rw-project`; with this choice, the `rw` command line tools can only be executed at the root of your project directory (and you may need to replace any `rw` command with `./rw`). 

<details>
<summary>Run with Docker</summary>
In its current form, the reproduce.work CLI is designed to be a user-friendly interface for:
 
- building and running common scientific container images, 
- managing files and volume interactions with containers, and 
- dealing with local port management. 

These are common headaches for users of containers and are exactly the types of issues that reproduce.work is designed to automate. As such, outside of requiring a local installation, this tool does not assume that its users are familiar with Docker at all. 

However, while the tool is in active development, its early adopters will likely have some familiarity with Docker. For such users, reproduce.work can be used as a set of developer tools to automate the handling of the tasks described above. The reproduce-work CLI has itself been developed with containerization in mind and can be used via its own Docker image without requiring direct installation of the reproduce.work binaries at all. 

You can mount your current directory to the image and use the `rw` commands in interactive mode inside the container (with access to your machine's files at `$(pwd)`): 

``` {.bash filename="Terminal"}
docker run --rm -it -v $(pwd):/app ghcr.io/reproduce-work/rw-cli:0.0.1
```

You can also add an alias to your shell configuration as a shortcut to simulate a full installation via the tool's Docker image:

``` {.bash filename=".shellrc"}
alias rw='docker run -v $(pwd):/app ghcr.io/reproduce-work/rw-cli:0.0.1'
```

After running `source ~/.shellrc`, you can use the `rw` command as if it was installed on your machine:

``` {.bash filename="Terminal"}
rw --help
```

</details>

## Basic Commands

There are THREE main commands in the reproduce.work workflow:

1. `rw init`: initialize a new project
2. `rw build`: download dependencies and install/package them in a self-contained environment
3. `rw launch`: launch your project's scientific environment and begin working

#### Suggested usage:

Create a directory for your reproducible project:

``` {.bash filename="Terminal"}
# Create a new directory for your project
mkdir my_project && cd my_project
```


### 1. Initialize: `rw init`

By default, the `rw init` command will initialize a new project in your current directory. It is recommended that you create a new directory for each project, and run `rw init` from within that directory at the start of each project.

Options:

- `-s, --sci-env <env>`: Set the scientific environment.
    - The currently supported options are:
        - `jupyter` (default)
        - `python`
        - `rstudio`
- `-f, --force`: Force new configuration by overwriting existing `config.toml` file.

Depending on which options you choose, the way you build and launch your scientific environment will vary:

::: panel-tabset

## Jupyter

<div class="rw-init">
``` {.bash filename="Terminal"}
# --sci-env=jupyter by default
rw init 
```
</div>

<!--
<details>
<summary>Video demonstration</summary>
<div class="video-container">
<video autoplay loop muted>
<source src="/files/media/rw1.mp4" type="video/mp4">
Your browser does not support the video tag.
</video>
</div>
</details>
-->

After running this command, you should see several files and folders added to your project directory:


<div class="tree">
<div class="block-title">
<p>Project directory structure</p>
</div>
<ul>
</li>
</li>
<li><span class="folder">.reproduce/</span>
<ul>
<li><span class="file">requirements.txt</span></li>
<li><span class="file">config.toml</span></li>
<li><span class="file">Dockerfile</span></li>
</ul>
</li>
<li><span class="file">.gitignore</span></li>
</ul>
</div>


### 2. Build: `rw build`

After initializing a project, it must be "built". This is the process of downloading the software required for running your project and packaging it in a container. 

Options:

- `--no-cache`: Download dependencies from the web without using locally cached versions. Default is `false`.
- `-v, --verbose`: Prints to console the output of your project's build process. Default is `false`.

### 3. Develop: `rw launch`

This command starts your scientific computing environment and allows you to begin writing code and analyzing data.

Options:

- `-o, --open`: Opens the scientific environment in your default browser. Default is `false`.
- `-p, --port <port>`: Set the local port for the jupyter server manually; otherwise, an open port will be found automatically.


### Installing packages and dependencies

While in the scientific development environment, you can install packages in one of two ways:

- **Persistent**: Add your desired packages on separate lines to `code/requirements.txt` and run `rw build` again. After "building" your scientific environment, you can stop and restart it and your packages will be installed.

- **Temporary**: While your dev environment is running, you can use `pip install <module>`; however keep in mind that modules/packages installed this way will not persist across sessions by default (i.e. if you stop and restart your scientific environment, you will need to reinstall them). This method is suitable for development/testing, but packages that are core to your project should be added to `code/requirements.txt`.


## Base Python

<div class="rw-init">
``` {.bash filename="Terminal"}
rw init --sci-env=python
```
</div>


After running this command, you should see several files and folders added to your project directory:

<div class="tree">
<div class="block-title">
<p>Project directory structure</p>
</div>
<ul>
</li>
</li>
<li><span class="folder">.reproduce/</span>
<ul>
<li><span class="file">requirements.txt</span></li>
<li><span class="file">config.toml</span></li>
<li><span class="file">Dockerfile</span></li>
</ul>
</li>
<li><span class="file">.gitignore</span></li>
</ul>
</div>


### 2. Build: `rw build`

After initializing a project, it must be "built". This is the process of downloading the software required for running your project and packaging it in a container. 

Options:

- `--no-cache`: Download dependencies from the web without using locally cached versions. Default is `false`.
- `-v, --verbose`: Prints to console the output of your project's build process. Default is `false`.

### 3. Develop: `rw launch`

This command starts your scientific computing environment and allows you to begin writing code and analyzing data.

Options:

- `-o, --open`: Opens the scientific environment in your default browser. Default is `false`.
- `-p, --port <port>`: Set the local port for the jupyter server manually; otherwise, an open port will be found automatically.


### Installing packages and dependencies

While in the scientific development environment, you can install packages in one of two ways:

- **Persistent**: Add your desired packages on separate lines to `code/requirements.txt` and run `rw build` again. After "building" your scientific environment, you can stop and restart it and your packages will be installed.

- **Temporary**: While your dev environment is running, you can use `pip install <module>`; however keep in mind that modules/packages installed this way will not persist across sessions by default (i.e. if you stop and restart your scientific environment, you will need to reinstall them). This method is suitable for development/testing, but packages that are core to your project should be added to `code/requirements.txt`.




## RStudio Server

<div class="rw-init">
``` {.bash filename="Terminal"}
rw init --sci-env=rstudio
```
</div>




After running this command, you should see several files and folders added to your project directory:


<div class="tree">
<div class="block-title">
<p>Project directory structure</p>
</div>
<ul>
</li>
</li>
<li><span class="folder">.reproduce/</span>
<ul>
<li><span class="file">packages.R</span></li>
<li><span class="file">config.toml</span></li>
<li><span class="file">Dockerfile</span></li>
</ul>
</li>
<li><span class="file">.gitignore</span></li>
</ul>
</div>

### 2. Build: `rw build`

After initializing a project, it must be "built". This is the process of downloading the software required for running your project and packaging it in a container. 

Options:

- `--no-cache`: Download dependencies from the web without using locally cached versions. Default is `false`.
- `-v, --verbose`: Prints to console the output of your project's build process. Default is `false`.

### 3. Develop: `rw launch`

This command starts your scientific computing environment and allows you to begin writing code and analyzing data.

Options:

- `-o, --open`: Opens the scientific environment in your default browser. Default is `false`.
- `-p, --port <port>`: Set the local port for the jupyter server manually; otherwise, an open port will be found automatically.


### Installing packages and dependencies

While in the scientific development environment, you can install packages in one of two ways:

- **Persistent**: Add your desired packages on separate lines to `code/packages.R` and run `rw build` again. After "building" your scientific environment, you can stop and restart it and your packages will be installed.

- **Temporary**: While your dev environment is running, you can use `install.packages(<pkg>)`; however keep in mind that modules/packages installed this way will not persist across sessions by default (i.e. if you stop and restart your scientific environment, you will need to reinstall them). This method is suitable for development/testing, but packages that are core to your project should be added to `code/packages.R`.



:::

<!-- end of .panel-tabset environment -->




<script>
document.addEventListener('DOMContentLoaded', function() {
    // Function to check if a URL parameter exists
    function hasParam(param) {
        return new URLSearchParams(window.location.search).has(param);
    }

    // Function to simulate a click on an element
    function clickElement(selector) {
        const element = document.querySelector(selector);
        if (element) {
            element.click();
        }
    }

    // Check for each parameter and click the corresponding element
    if (hasParam('jupyter')) {
        clickElement('#tabset-1-3-tab');
    } else if (hasParam('python')) {
        clickElement('#tabset-1-2-tab');
    } else if (hasParam('rstudio')) {
        clickElement('#tabset-1-3-tab');
    }
});
</script>

