---
title: "Getting started with reproduce.work"
---

## Pre-requisites

*Knowledge*: 

- Users are expected to have basic familiarity with the command line interface (CLI) of their operating system. The following instructions are for users of Linux and macOS. Windows users should install [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/install-win10) and follow the instructions for Linux users. 
- Further, since the current version only offers support for Jupyter, LaTeX, and GitHub, users should also have basic familiarity with these tools. Support for more frameworks will be possible with future releases.

*Software*: 

- The reproduce.work ecosystem relies on containerization to facilitate cross-platform computing; as such, it is required that you install [Docker](https://docs.docker.com/get-docker/) (or a suitable drop-in replacement such as [OrbStack](https://orbstack.dev/); recommended for Apple Silicon machines). You do not need deep familiarity with Docker or containerization to use reproduce.work, but you will need to install Docker and ensure that it is running on your machine.

- While not required, it is also recommended that you install [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) and publish your reproducible projects to GitHub, as this will allow you to easily share your work openly with others and take advantage of the full suite of features offered by reproduce.work.

Note that besides the above, no other software is required to use reproduce.work. All other dependencies will be installed **inside a containerized environment** automatically when you run the `rw build` command. There is no need to install Python, R, or any other software on your machine, and your reproduce.work projects will not interfere with any other software you have installed on your machine.

## Installation

for buildializing new projects. It can be installed by running the following command:

``` {.bash filename="Terminal"}
curl -sSL https://reproduce.work/install | bash
```

You will be prompted with two options:

1. Install to your machine (in `/usr/local/bin`) for use anywhere in your command line
2. Install to your current directory. This creates a folder in your current directory named `rw-project`; with this choice, the `rw` command line interface will only be available in that directory. 

## Basic Commands

There are THREE main commands in the reproduce.work workflow:

1. `rw init`: buildialize a new project
2. `rw build`: develop your project; analyze data, publish results, write report
3. `rw develop`: run your project to reproduce results


### 1. Initialize: `rw init`

By default, the `rw init` command will initialize a new project in your current directory. It is recommended that you create a new directory for each project, and run `rw init` from within that directory at the start of each project.


``` {.bash filename="Terminal"}
# Create a new directory for your project
mkdir my_project
cd my_project

# Initialize a new project
rw init 
```

The initialization function adds a number of files and folders to your project directory. The most important of these are:


<div class="tree">
<div class="block-title">
<p>Project directory structure</p>
</div>
<ul>
<li><span class="folder">code/</span>
<ul>
<li><span class="file">00_start.ipynb</span></li>
<li><span class="file">requirements.txt</span></li>
</ul>
</li>
<li><span class="folder">report/</span>
<ul>
<li><span class="file">main.md</span></li>
<li><span class="folder">latex/</span></li>
</ul>
</li>
<li><span class="folder">reproduce/</span>
<ul>
<li><span class="file">config.toml</span></li>
<li><span class="file">pubdata.toml</span></li>
<li><span class="file">Dockerfile</span></li>
</ul>
</li>
<li><span class="file">.gitignore</span></li>
</ul>
</div>

### 2. Build: `rw build`

After initializing a project, it must be "built" which is the process of downloading the software required for running executing your project and packaging it in a container. Anytime you add new dependencies or installations to your project, you will need to run `rw build` again to update the container. 


### 3. Develop: `rw develop`

This command starts your scientific computing environment and allows you to begin writing code and analyzing data. By default the command begins two processes:

1. A Jupyter Lab server
2. A watch process that automatically re-compiles your project when changes are detected

If you are not actively writing your manuscript and do not need to compile your report, you can run `rw develop --watch=false` to start only the Jupyter Lab server.



<!-- Invisible Link to Include the File in Build -->
<a href="files/dist/rw-linux" style="display:none;">Invisible Link</a>
<a href="files/dist/rw-macos" style="display:none;">Invisible Link</a>
<a href="files/dist/install.sh" style="display:none;">Invisible Link</a>
