{"title":"Frequently Asked Questions","markdown":{"yaml":{"title":"Frequently Asked Questions","sidebar":false},"headingText":"How is this different from existing efforts in open science?","containsRefs":false,"markdown":"\n\n    \n\nRecent interest in *open* science has been a positive step toward improving the reproducibility of scientific research, but the open science movement has largely focused on the *transparency* of scientific research, rather than explicilty facilitating its *reproducibility*. Many of the tools and practices of open science --- open data, open code, pre-registration, etc. --- are important steps toward reproducibility, but they are not sufficient, as they require authors to provide detailed documentation and instructions to ensure that others can independently replicate their work. This work is often left undone and, even when it is, writing adequate documentation and troubleshooting cross-platform execution errors can be a time-consuming and error-prone process.\n\nA major goal for this project is to remove this need for manual documentation by making it easier for scientists to create projects that are inherently reproducible. \n\n### Why containerization? \n\n*Aren't tools like Python's `pip` (and `venv` and `conda` and `mamba` and etc.) and R's `.RProj` (and `Renviron` and `packrat` and etc.) sufficient?*\n\nExisting software projects around reproducibile/open science are often language-specific. The power of containerization is in its **universality**. Nearly any scientific environment can be packaged into a containerized interface, opening up the possibility for language-agnostic reproducibility standards and frameworks that can transcend any particular programming language. \n\n<details>\n<summary>Details</summary>\n\nAn opinionated developer might say that containerization is an objectively better user interface and dependency management system than all the tools listed above. That opinion may stem from the ability of containers to either meet or exceed the standards of these tools on several dimensions: \n\n(1) wideness of compatibility\n(2) user friendliness -- particularly when that depends on (1)\n(3) pre-requisite installations\n\nContainers can seemlesly run working computational environments with each of the tools mentioned above pre-installed/pre-configured, and can do so in a way that is objectively quite flexible/extensible. Especially when one wishes to combine one or more scientific environments, containers are very often the more user-friendly way to do so. i.e., If you're relying on one \"base\" language of abstraction, containers can accommodate workflows that include `pip`, `RStudio`, `julia`, `selenium`, etc. in ways that are easier to express than if one started with any of these other abstractions.\n\n\nDue to the vagaries of software engineering, tools like Python virtual environments and R project files still leave a lot of room for technical decay; this limits the longevity of projects that rely on these types of tools exclusively. By packaging scientific computing environments into containers, scientists can ensure that their analyses can be replicated exactly, irrespective of changes in underlying technology or platforms. This approach enhances the reliability of scientific findings and facilitates collaboration --- both within research teams but also across the broader scientific community by allowing anyone, anywhere, anytime to build upon the work of others. \n\n\nAll this being said, there is a version of this project which is focused more on developing **standards**; or perhaps in its best form, the project can help create both reproducibility standards *and* software for creating, verifying, and working with projects that are designed to meet those standards.\n\nIf we abstract away from the underlying software for a moment, what we really seek as scientists is some form of credible independent *verification*. Perhaps there is a way to achieve \"verification\" in ways that are more general than quantitative reproducibility.^[e.g., any set of software instructions that others can verify; or perhaps in an even more abstract incarnation, we could allow for any set of written instructions]. That being said, a significant aspect of what makes science scientific does come down to its quantifiability. In principle, much of which passes for computational science can be packaged in containerized projects with little additional overhead; this is essentially the motivation for this project in a nutshell. \n\n\n</details>\n\n\n## What is the long-term vision for this proejct?\n\nI have starting writing up a bigger vision for reproduce.work in a rough-draft manuscript, [which can be found here](/files/media/rw-manuscript-alpha.pdf).\n\nAs it currently stands, the reproduce.work CLI tool is essentially a simplified Docker interface for scientists. However, the potential applications of containerization technology in science more broadly go far beyond this, opening up possibilities for automating much of the existing work that falls under the umbrella of \"open\" science. \n\nPart of this bigger vision includes the development of a framework for metadata publishing in a way that allows scientific projects to be automatically verified, almost in a CI/CD-friendly manner. It is not hard to think of at least one or more *deterministic* checks -- i.e., fully programmatic scripts that could be run in the cloud or verified/signed independently --  that would be valuable for projects that make use of scientific computing. (In theory, even non-computational academic projects could benefit from some aspects of automated review, i.e., plaigarism checks, citation checks, etc.)\n\nFor example, if scientists were to conduct their analyses and author their manuscripts inside containerized environments, it would be trivial to not only reproduce their published reports from scratch, but it would also be possible to automatically verify that statistical results, figures, and data published in scientific manuscripts match exactly the output of their analysis code. This entirely removes the possibility for human transcription errors and can potentially mitigate (or at least significantly raise the costs of) certain types of fraud. However, the primary vision of this project is not to police bad actors, but rather to make the best scientists better by making it easier to document and share their work with others.\n\n<div class=\"bleedover-image-wrapper\">\n<img src=\"/files/img/nutshell.png\" alt=\"Nutshell Image\" />\n</div>\n\nWhat's more, as LLMs proliferate, one wonders whether application of these tools to academic publishing will be a blessing or a curse. One might be tempted to expand the types of checks we might want to do to include things like \"Get the consensus view of the 10 top performing AI models on `{this_leaderboard}` in response to this battery of prompts: `[{prompts}]`\". There is also the possibility that as LLMs become more integrated into scientific workflows, the importance of executability, verifiability, and reproducibility will become even more important as the proliferation of genernative content may diminish the trust we place in media and projects consisting of pure text.\n\nMy hope is that reproduce.work can contribute to some of the upside associated with these possiblities. Much of what is described above is possible with current containerization technologies, but will require more development and coordination to become a reality. \n","srcMarkdownNoYaml":"\n\n    \n### How is this different from existing efforts in open science?\n\nRecent interest in *open* science has been a positive step toward improving the reproducibility of scientific research, but the open science movement has largely focused on the *transparency* of scientific research, rather than explicilty facilitating its *reproducibility*. Many of the tools and practices of open science --- open data, open code, pre-registration, etc. --- are important steps toward reproducibility, but they are not sufficient, as they require authors to provide detailed documentation and instructions to ensure that others can independently replicate their work. This work is often left undone and, even when it is, writing adequate documentation and troubleshooting cross-platform execution errors can be a time-consuming and error-prone process.\n\nA major goal for this project is to remove this need for manual documentation by making it easier for scientists to create projects that are inherently reproducible. \n\n### Why containerization? \n\n*Aren't tools like Python's `pip` (and `venv` and `conda` and `mamba` and etc.) and R's `.RProj` (and `Renviron` and `packrat` and etc.) sufficient?*\n\nExisting software projects around reproducibile/open science are often language-specific. The power of containerization is in its **universality**. Nearly any scientific environment can be packaged into a containerized interface, opening up the possibility for language-agnostic reproducibility standards and frameworks that can transcend any particular programming language. \n\n<details>\n<summary>Details</summary>\n\nAn opinionated developer might say that containerization is an objectively better user interface and dependency management system than all the tools listed above. That opinion may stem from the ability of containers to either meet or exceed the standards of these tools on several dimensions: \n\n(1) wideness of compatibility\n(2) user friendliness -- particularly when that depends on (1)\n(3) pre-requisite installations\n\nContainers can seemlesly run working computational environments with each of the tools mentioned above pre-installed/pre-configured, and can do so in a way that is objectively quite flexible/extensible. Especially when one wishes to combine one or more scientific environments, containers are very often the more user-friendly way to do so. i.e., If you're relying on one \"base\" language of abstraction, containers can accommodate workflows that include `pip`, `RStudio`, `julia`, `selenium`, etc. in ways that are easier to express than if one started with any of these other abstractions.\n\n\nDue to the vagaries of software engineering, tools like Python virtual environments and R project files still leave a lot of room for technical decay; this limits the longevity of projects that rely on these types of tools exclusively. By packaging scientific computing environments into containers, scientists can ensure that their analyses can be replicated exactly, irrespective of changes in underlying technology or platforms. This approach enhances the reliability of scientific findings and facilitates collaboration --- both within research teams but also across the broader scientific community by allowing anyone, anywhere, anytime to build upon the work of others. \n\n\nAll this being said, there is a version of this project which is focused more on developing **standards**; or perhaps in its best form, the project can help create both reproducibility standards *and* software for creating, verifying, and working with projects that are designed to meet those standards.\n\nIf we abstract away from the underlying software for a moment, what we really seek as scientists is some form of credible independent *verification*. Perhaps there is a way to achieve \"verification\" in ways that are more general than quantitative reproducibility.^[e.g., any set of software instructions that others can verify; or perhaps in an even more abstract incarnation, we could allow for any set of written instructions]. That being said, a significant aspect of what makes science scientific does come down to its quantifiability. In principle, much of which passes for computational science can be packaged in containerized projects with little additional overhead; this is essentially the motivation for this project in a nutshell. \n\n\n</details>\n\n\n## What is the long-term vision for this proejct?\n\nI have starting writing up a bigger vision for reproduce.work in a rough-draft manuscript, [which can be found here](/files/media/rw-manuscript-alpha.pdf).\n\nAs it currently stands, the reproduce.work CLI tool is essentially a simplified Docker interface for scientists. However, the potential applications of containerization technology in science more broadly go far beyond this, opening up possibilities for automating much of the existing work that falls under the umbrella of \"open\" science. \n\nPart of this bigger vision includes the development of a framework for metadata publishing in a way that allows scientific projects to be automatically verified, almost in a CI/CD-friendly manner. It is not hard to think of at least one or more *deterministic* checks -- i.e., fully programmatic scripts that could be run in the cloud or verified/signed independently --  that would be valuable for projects that make use of scientific computing. (In theory, even non-computational academic projects could benefit from some aspects of automated review, i.e., plaigarism checks, citation checks, etc.)\n\nFor example, if scientists were to conduct their analyses and author their manuscripts inside containerized environments, it would be trivial to not only reproduce their published reports from scratch, but it would also be possible to automatically verify that statistical results, figures, and data published in scientific manuscripts match exactly the output of their analysis code. This entirely removes the possibility for human transcription errors and can potentially mitigate (or at least significantly raise the costs of) certain types of fraud. However, the primary vision of this project is not to police bad actors, but rather to make the best scientists better by making it easier to document and share their work with others.\n\n<div class=\"bleedover-image-wrapper\">\n<img src=\"/files/img/nutshell.png\" alt=\"Nutshell Image\" />\n</div>\n\nWhat's more, as LLMs proliferate, one wonders whether application of these tools to academic publishing will be a blessing or a curse. One might be tempted to expand the types of checks we might want to do to include things like \"Get the consensus view of the 10 top performing AI models on `{this_leaderboard}` in response to this battery of prompts: `[{prompts}]`\". There is also the possibility that as LLMs become more integrated into scientific workflows, the importance of executability, verifiability, and reproducibility will become even more important as the proliferation of genernative content may diminish the trust we place in media and projects consisting of pure text.\n\nMy hope is that reproduce.work can contribute to some of the upside associated with these possiblities. Much of what is described above is possible with current containerization technologies, but will require more development and coordination to become a reality. \n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"faq.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","resource-files":["files/dist/install.sh","files/dist/reproduce-work-macos","files/dist/reproduce-work-linux"],"light":"cosmo","dark":["cosmo","dark-styles.css"],"title":"Frequently Asked Questions","sidebar":false},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}