[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "reproduce.work: containerization for scientists",
    "section": "",
    "text": "reproduce.work is a framework for developing self-contained, self-documenting scientific projects that facilitate computational reproducibility and data traceability. This project is based from the ground up on a paradigm from software engineering called containerization, which is used extensively in applications that require code to be reliably executed across different computing environments and time periods.\nHowever, reproduce.work is designed for use by scientists and provides a simple framework that abstracts away from underlying complexities and technical details, providing a streamlined workflow for truly reproducible science. The current goal of the project is to lower the barrier to entry for reproducible science by providing a simple, intuitive framework that can be used by scientists with minimal technical expertise. This allows scientists to focus on their research, rather than the technical details of containerization."
  },
  {
    "objectID": "index.html#why-containerization",
    "href": "index.html#why-containerization",
    "title": "reproduce.work: containerization for scientists",
    "section": "Why containerization?",
    "text": "Why containerization?\nReproducibility is core to the philosophy and practice of science. However, as the credibility revolution in recent decades has shown, the practice of science has fallen woefully short of meeting even basic standards toward true and widespread reproducibility. By packaging the entire scientific environment — software, dependencies, data, and manuscripts — into containers, scientists can ensure that their experiments and analyses can be replicated exactly, irrespective of changes in underlying technology or platforms. This approach enhances the reliability of scientific findings and facilitates collobration — both within research teams but also across the broader scientific community by allowing anyone, anywhere, anytime to build upon the work of others."
  },
  {
    "objectID": "index.html#current-release",
    "href": "index.html#current-release",
    "title": "reproduce.work: containerization for scientists",
    "section": "Current release",
    "text": "Current release\nThis project is currently in the alpha development phase and serves as proof of concept for further development. Current support is offered for the following stack:\n\nComputing environment: Jupyter (interactive Python)\nDocument environment: LaTeX\nHosting environment: GitHub\n\nThe longer-term vision for reproduce.work is as a wrapper framework for the vast majority of scientific computing workflows. As such, it has been designed to accommodate other computing environments (vanilla Python, R, and RStudio, Stata, etc.), document environments (Microsoft Word, HTML), and hosting environments (GitLab, etc.) with future development."
  },
  {
    "objectID": "getting-started.html",
    "href": "getting-started.html",
    "title": "Getting started with reproduce.work",
    "section": "",
    "text": "Knowledge:\n\nUsers are expected to have basic familiarity with the command line interface (CLI) of their operating system. The following instructions are for users of Linux and macOS. Windows users should install Windows Subsystem for Linux and follow the instructions for Linux users.\nFurther, since the current version only offers support for Jupyter, LaTeX, and GitHub, users should also have basic familiarity with these tools. Support for more frameworks will be possible with future releases.\n\nSoftware:\n\nThe reproduce.work ecosystem relies on containerization to facilitate cross-platform computing; as such, it is required that you install Docker (or a suitable drop-in replacement such as OrbStack; recommended for Apple Silicon machines). You do not need deep familiarity with Docker or containerization to use reproduce.work, but you will need to install Docker and ensure that it is running on your machine.\nWhile not required, it is also recommended that you install Git and publish your reproducible projects to GitHub, as this will allow you to easily share your work openly with others and take advantage of the full suite of features offered by reproduce.work.\n\nNote that besides the above, no other software is required to use reproduce.work. All other dependencies will be installed inside a containerized environment automatically when you run the rw build command. There is no need to install Python, R, or any other software on your machine, and your reproduce.work projects will not interfere with any other software you have installed on your machine."
  },
  {
    "objectID": "getting-started.html#pre-requisites",
    "href": "getting-started.html#pre-requisites",
    "title": "Getting started with reproduce.work",
    "section": "",
    "text": "Knowledge:\n\nUsers are expected to have basic familiarity with the command line interface (CLI) of their operating system. The following instructions are for users of Linux and macOS. Windows users should install Windows Subsystem for Linux and follow the instructions for Linux users.\nFurther, since the current version only offers support for Jupyter, LaTeX, and GitHub, users should also have basic familiarity with these tools. Support for more frameworks will be possible with future releases.\n\nSoftware:\n\nThe reproduce.work ecosystem relies on containerization to facilitate cross-platform computing; as such, it is required that you install Docker (or a suitable drop-in replacement such as OrbStack; recommended for Apple Silicon machines). You do not need deep familiarity with Docker or containerization to use reproduce.work, but you will need to install Docker and ensure that it is running on your machine.\nWhile not required, it is also recommended that you install Git and publish your reproducible projects to GitHub, as this will allow you to easily share your work openly with others and take advantage of the full suite of features offered by reproduce.work.\n\nNote that besides the above, no other software is required to use reproduce.work. All other dependencies will be installed inside a containerized environment automatically when you run the rw build command. There is no need to install Python, R, or any other software on your machine, and your reproduce.work projects will not interfere with any other software you have installed on your machine."
  },
  {
    "objectID": "getting-started.html#installation",
    "href": "getting-started.html#installation",
    "title": "Getting started with reproduce.work",
    "section": "Installation",
    "text": "Installation\nfor buildializing new projects. It can be installed by running the following command:\n\n\nTerminal\n\ncurl -sSL https://reproduce.work/install | bash\n\nYou will be prompted with two options:\n\nInstall to your machine (in /usr/local/bin) for use anywhere in your command line\nInstall to your current directory. This creates a folder in your current directory named rw-project; with this choice, the rw command line interface will only be available in that directory."
  },
  {
    "objectID": "getting-started.html#usage",
    "href": "getting-started.html#usage",
    "title": "Getting started with reproduce.work",
    "section": "Usage",
    "text": "Usage\nThere are THREE main commands in the reproduce.work workflow:\n\nrw init: buildialize a new project\nrw build: develop your project; analyze data, publish results, write report\nrw develop: run your project to reproduce results\n\n\n1. Initialize: rw init\nBy default, the rw init command will initialize a new project in your current directory. It is recommended that you create a new directory for each project, and run rw init from within that directory at the start of each project.\n\n\nTerminal\n\n# Create a new directory for your project\nmkdir my_project\ncd my_project\n\n# Initialize a new project\nrw init \n\nThe initialization function adds a number of files and folders to your project directory. The most important of these are:\n# Where analysis code and data should go\ncode/\n  |_ 00_start.ipynb\n  |_ requirements.txt\n\n# Where you will author your report/manuscript\nreport/\n  |_ main.md \n  |_ latex/\n\n# Metadata and configuration for your project \n# Files in this directory are automatically generated and updated by reproduce.work\nreproduce/\n  |_ config.toml\n  |_ pubdata.toml\n  |_ Dockerfile\n\n.gitignore # Files to be ignored by Git\n\n\n2. Build: rw build\n\n\n3. Develop: rw develop\n\nNote!\n\nDue to idiosyncrasies within the Jupyter ecosystem, when using publish_data or publish_file, you must first run register_notebook(‘code/.ipynb’). If you have multiple notebooks open simultaneously, keep in mind that only the most recently registered notebook will be used as the generating script for any data published with publish_data or publish_file.\n\n\n\n\nInstalling packages\nWhile in the development environment, you can install packages in one of two ways:\n\nPersistent: Add your desired packages on separate lines to code/requirements.txt and run rw build again. After “building” your dev environment, you can stop and restart it and your packages will be installed.\nTemporary: While your dev environment is running, you can use pip install &lt;package_name&gt;; however keep in mind that packages installed this way will not persist across sessions (i.e. if you stop and restart your dev environment, you will need to reinstall them). This is suitable for development/testing, but packages that are core to your project should be added to code/requirements.txt.\n\n\nInvisible Link Invisible Link Invisible Link"
  }
]