[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The reproduce.work framework is being developed by Alex P. Miller, Assistant Professor of Marketing at the USC Marshall School of Business. It is currently a proof-of-concept prototype and is under active development. If you are interested in using the framework, contributing, or discussing its future, please reach out directly."
  },
  {
    "objectID": "docs/getting-started.html",
    "href": "docs/getting-started.html",
    "title": "Getting started with reproduce.work",
    "section": "",
    "text": "Knowledge:\n\nUsers are expected to have basic familiarity with the command line interface (CLI) of their operating system. The following instructions are for users of Linux and macOS. Windows users should install Windows Subsystem for Linux and follow the instructions for Linux users.\nFurther, since the current version only offers support for Jupyter, LaTeX, and GitHub, users should also have basic familiarity with these tools. Support for more frameworks will be possible with future releases.\n\nSoftware:\n\nThe reproduce.work ecosystem relies on containerization to facilitate cross-platform computing; as such, it is required that you install Docker (or a suitable drop-in replacement such as OrbStack; recommended for Apple Silicon machines). You do not need deep familiarity with Docker or containerization to use reproduce.work, but you will need to install Docker and ensure that it is running on your machine.\nWhile not required, it is also recommended that you install Git and publish your reproducible projects to GitHub, as this will allow you to easily share your work openly with others and take advantage of the full suite of features offered by reproduce.work.\n\nNote that besides the above, no other software is required to use reproduce.work. All other dependencies will be installed inside a containerized environment automatically when you run the rw build command. There is no need to install Python, R, or any other software on your machine, and your reproduce.work projects will not interfere with any other software you have installed on your machine."
  },
  {
    "objectID": "docs/getting-started.html#pre-requisites",
    "href": "docs/getting-started.html#pre-requisites",
    "title": "Getting started with reproduce.work",
    "section": "",
    "text": "Knowledge:\n\nUsers are expected to have basic familiarity with the command line interface (CLI) of their operating system. The following instructions are for users of Linux and macOS. Windows users should install Windows Subsystem for Linux and follow the instructions for Linux users.\nFurther, since the current version only offers support for Jupyter, LaTeX, and GitHub, users should also have basic familiarity with these tools. Support for more frameworks will be possible with future releases.\n\nSoftware:\n\nThe reproduce.work ecosystem relies on containerization to facilitate cross-platform computing; as such, it is required that you install Docker (or a suitable drop-in replacement such as OrbStack; recommended for Apple Silicon machines). You do not need deep familiarity with Docker or containerization to use reproduce.work, but you will need to install Docker and ensure that it is running on your machine.\nWhile not required, it is also recommended that you install Git and publish your reproducible projects to GitHub, as this will allow you to easily share your work openly with others and take advantage of the full suite of features offered by reproduce.work.\n\nNote that besides the above, no other software is required to use reproduce.work. All other dependencies will be installed inside a containerized environment automatically when you run the rw build command. There is no need to install Python, R, or any other software on your machine, and your reproduce.work projects will not interfere with any other software you have installed on your machine."
  },
  {
    "objectID": "docs/getting-started.html#installation",
    "href": "docs/getting-started.html#installation",
    "title": "Getting started with reproduce.work",
    "section": "Installation",
    "text": "Installation\nfor buildializing new projects. It can be installed by running the following command:\n\n\nTerminal\n\ncurl -sSL https://reproduce.work/install | bash\n\nYou will be prompted with two options:\n\nInstall to your machine (in /usr/local/bin) for use anywhere in your command line\nInstall to your current directory. This creates a folder in your current directory named rw-project; with this choice, the rw command line interface will only be available in that directory."
  },
  {
    "objectID": "docs/getting-started.html#usage",
    "href": "docs/getting-started.html#usage",
    "title": "Getting started with reproduce.work",
    "section": "Usage",
    "text": "Usage\nThere are THREE main commands in the reproduce.work workflow:\n\nrw init: buildialize a new project\nrw build: develop your project; analyze data, publish results, write report\nrw develop: run your project to reproduce results\n\n\n1. Initialize: rw init\nBy default, the rw init command will initialize a new project in your current directory. It is recommended that you create a new directory for each project, and run rw init from within that directory at the start of each project.\n\n\nTerminal\n\n# Create a new directory for your project\nmkdir my_project\ncd my_project\n\n# Initialize a new project\nrw init \n\nThe initialization function adds a number of files and folders to your project directory. The most important of these are:\n# Where analysis code and data should go\ncode/\n  |_ 00_start.ipynb\n  |_ requirements.txt\n\n# Where you will author your report/manuscript\nreport/\n  |_ main.md \n  |_ latex/\n\n# Metadata and configuration for your project \n# Files in this directory are automatically generated and updated by reproduce.work\nreproduce/\n  |_ config.toml\n  |_ pubdata.toml\n  |_ Dockerfile\n\n.gitignore # Files to be ignored by Git\n\n\n2. Build: rw build\nAfter initializing a project, it must be “built” which is the process of downloading the software required for running executing your project and packaging it in a container. Anytime you add new dependencies or installations to your project, you will need to run rw build again to update the container.\n\n\n3. Develop: rw develop\nThis command starts your scientific computing environment and allows you to begin writing code and analyzing data. By default the command begins two processes:\n\nA Jupyter Lab server\nA watch process that automatically re-compiles your project when changes are detected\n\nIf you are not actively writing your manuscript and do not need to compile your report, you can run rw develop --watch=false to start only the Jupyter Lab server.\n\nNote!\n\nDue to idiosyncrasies within the Jupyter ecosystem, when using publish_data or publish_file, you must first run register_notebook(‘code/.ipynb’). If you have multiple notebooks open simultaneously, keep in mind that only the most recently registered notebook will be used as the generating script for any data published with publish_data or publish_file.\n\n\n\n\nInstalling packages\nWhile in the development environment, you can install packages in one of two ways:\n\nPersistent: Add your desired packages on separate lines to code/requirements.txt and run rw build again. After “building” your dev environment, you can stop and restart it and your packages will be installed.\nTemporary: While your dev environment is running, you can use pip install &lt;package_name&gt;; however keep in mind that packages installed this way will not persist across sessions (i.e. if you stop and restart your dev environment, you will need to reinstall them). This is suitable for development/testing, but packages that are core to your project should be added to code/requirements.txt.\n\n\nInvisible Link Invisible Link Invisible Link"
  },
  {
    "objectID": "docs/markdown-latex.html",
    "href": "docs/markdown-latex.html",
    "title": "Working with the markdown-latex document environment",
    "section": "",
    "text": "1. INSERT Command\n\nSyntax: \\INSERT{variable_name}\nDescription: This command is used to insert dynamic content into the document. The variable_name refers to a specific piece of data or value defined elsewhere, often in a TOML configuration file. When the document is processed, the INSERT command is replaced with the actual value of variable_name.\nUse Case: Use INSERT to dynamically add data like dates, names, or any other variable content that might change or needs to be reused across different documents.\n\n\n\n2. LINK Command\n\nSyntax: \\LINK{variable_name}\nDescription: This command is functionally similar to the \\INSERT command, in that it will dynamically insert the value of the variable_name from your published data, but it will also wrap that value in a hyperlink to the metadata associated with that variable in the pubdata.toml file. Once compiled, it turns into an actual clickable link in the document.\nUse Case: Use LINK to embed hyperlinks seamlessly in your text, linking to external resources, references, or related documents without cluttering your markdown with URLs.\n\n\n\n3. FILE Command\n\nSyntax: \\FILE{file_path}\nDescription: This command is used to reference or include external files in the document. file_path specifies the location of the file. During processing, the reproduce.work script copies the file into your LaTeX project and allows for you to reference it in your\nUse Case: Use FILE when you need to include external resources like images, dynamically generated .tex files, or other data that is generated in the process of your research.\n\n\n\n4. BADGE Command\n\nSyntax: \\BADGE{variable_name}\nDescription: This command is designed to insert a badge source . The variable_name is used to fetch the badge’s image URL and other related metadata. This command typically generates a small image, often linked to an external source.\nUse Case: Use BADGE to insert recognition badges, logos, or any small icons that provide quick visual information or branding to your document.\n\n\n\n5. WRAP Command\n\nSyntax: \\WRAP{variable_name}\nDescription: The WRAP command is used to create a specially formatted section or a block in the document. It wraps the content specified by variable_name in additional formatting, potentially including links, badges, or other decorative elements.\nUse Case: Use WRAP for highlighting or distinguishing certain sections of your document, such as quotes, special notes, or featured content, with additional styling or formatting."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "reproduce.work: containerization for scientists",
    "section": "",
    "text": "reproduce.work is a framework for developing self-contained, self-documenting scientific projects that facilitate computational reproducibility and data traceability. This project is based from the ground up on a paradigm from software engineering called containerization, which is used extensively in applications that require code to be reliably executed across different computing environments and time periods.\nHowever, reproduce.work is designed for use by scientists and provides a simple framework that abstracts away from underlying complexities and technical details, providing a streamlined workflow for truly reproducible science. The current goal of the project is to lower the barrier to entry for reproducible science by providing a simple, intuitive framework that can be used by scientists with minimal technical expertise. This allows scientists to focus on their research, rather than the technical details of containerization."
  },
  {
    "objectID": "index.html#current-release",
    "href": "index.html#current-release",
    "title": "reproduce.work: containerization for scientists",
    "section": "Current release",
    "text": "Current release\nThis project is currently in the alpha development phase and serves as proof of concept for further development. Current support is offered for the following stack:\n\nComputing environment: Jupyter (interactive Python)\nDocument environment: LaTeX\nHosting environment: GitHub\n\nThe longer-term vision for reproduce.work is as a wrapper framework for the vast majority of scientific computing workflows. As such, it has been designed to accommodate other computing environments (vanilla Python, R, and RStudio, Stata, etc.), document environments (Microsoft Word, HTML), and hosting environments (GitLab, etc.) with future development."
  }
]